#How to setup, run, and analyze a scan

The following tutorial will cover running a complete scan on channel 0.  A copy of the script is included in the examples folder.  It is aimed at those who have a basic understanding of python, so brush up a little if something doesn't make sense.  


= Steps =

Setting up a scan on the daq device can be tedious and a little confusing at first, however if you have set up one before, you need only notice the syntax changes when using Python.

  # Initialize the Device
  # Setup the scan configuration
  # Setup the scan rate and transfer buffer
  # Setup trigger events
  # Arm and trigger the acquisition
  # Disarm and evaluate the results

==Initialize the Device==

The first thing you need to do is to create a device object that you wish to perform the scan with.  This is done in two simple lines:

{{{
import daqX

dev = daqX.daqDevice('DaqBoard2K0')
}}}

Import daqX.py and turn the device on. 'DaqBoard2K0' is the name of the device installed on the computer, yours may be different, use the GetDeviceList() function to see the names of the devices installed on your own computer.

And you are done.  You're device is online and ready for configuration.

==Setup the scan configuration==

Setting up the scan configuration is simple to script, however making sure you have the correct flags, gains, channel groups setup correctly is very device specific and if you are getting error messages through a pop-up menu rather than through the Python shell, look up the error code and check if your setup is correct.

For the purpose of this example, a scan will be configured for channel 0, across the full -10.0 to +10.0 range of the DaqBoard2000.  Best thing to do after initializing is to setup those variables like so:

{{{
channels = [0]
gains = ['DgainX1']
flags = ['DafBipolar']
scans = 10
}}}

channels, gains and flags must be passed as lists even if you are using one variable.  They are passed to the library as arrays and will get very angry if not done so.

So what we have done here is defined the channels we want as just channel 0.  We are using a gain of 'DgainX1' and a flag of 'DafBipolar' which sums up to, no gain at all, going both positive and negative.  Bipolar is defined as a range from -maxVolt to +maxVolt, and with a gain of X1 on a DaqBoard2000 such as in this example it is a range from -10.0V to +10.0V.  

We also defined a variable scans here.  It is used later on to help configure the size of the buffer where the scan will get added too.  It's mentioned here to keep the scan configuration variables together.

Generally, before you configure the scan, it is common practice to setup the Acquisition mode like so:

{{{
acqmode = 'DaamNShot'
dev.AdcSetAcq(acqmode, postTrigCount = scans)
}}}

Here we set the acquisition mode to 'DaamNShot' which basically runs the number of preTrigScans, triggers the full scan, then scans the number of postTrigScans, and disarms the acquistion.  For simplicities sake, our scan will be just 10 postTrigScans as you see here.

Now once the acquisition mode is set you can setup the scan configuration like so:

{{{
dev.AdcSetScan(channels, gains, flags)
}}}

Remember, if you want to run a scan on more than one channel using AdcSetScan, your lists for channels, gains and flags must correspond, where `gains[0]` is the gain key for `channels[0]`, and `flags[0]` is a *list* of flags for `channels[0]`.

And thats that, scan is configured.

==Setup the scan rate and transfer buffer==

Each scan is configured with a sampling rate like so:

{{{
mode = 'DarmPeriod'
state = 'DaasPostTrig'
period = 1000000.0

dev.AdcSetRate(mode, state, period)
}}}

The function should be self explanatory.  Mode, is a keyword to describe how you will time the scan, in this case 'DarmPeriod' is used to scan using a set period.  'DarmFrequency' is also available, though I have had little luck getting it to be nice.  State indicates the acquisition state the scan rate applies to, either post-trigger or pre-trigger.

Once that is set up, a buffer must be allocated.  This requires more attention in low-level languages like C, but not so for Python.  It will return a list of the values scanned in.  The command takes two arguments, a list of transfer flags, and the number of scans to properly allocate space, in the case of this tutorial that is 10 scans.

{{{
transMask = ['DatmUpdateSingle','DatmCycleOn']

buf = dev.AdcTransferSetBuffer(transMask, scans)
}}}

More information regarding the flags is available in the programmers documentation of your Daqboards API shipped with the device.  Here, 'DatmUpdateSingle' updates the buffer each scan, and 'DatmCycleOn' will loop over the buffer if the end of the buffer is reached thus overwriting data, and is terminated when the transfer is stopped or reaches the trigger count defined.